"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Base64ToFile = /** @class */ (function () {
    function Base64ToFile(base64, name) {
        this.view = window;
        this.saveLink = window.document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
        this.canUseSaveLink = 'download' in this.saveLink;
        this.forceSaveableType = this.extensionToMime();
        var ext = Base64ToFile.fileExtension(name);
        var type = this.extensionToMime(ext) || this.forceSaveableType;
        this.blob = this.base64toBlob(base64, type);
        this.name = name;
    }
    // Returns file extension by file name
    Base64ToFile.fileExtension = function (fileName) {
        var match = fileName.match(/[^.][aA-zZ0-9]+$/i);
        return !match ? '' : match[0].toLowerCase();
    };
    Base64ToFile.prototype.save = function () {
        var _this = this;
        var blob = this.autoBom();
        var objectUrl = this.view.URL.createObjectURL(blob);
        if (this.canUseSaveLink) {
            window.setTimeout(function () {
                _this.saveLink.href = objectUrl;
                _this.saveLink.download = _this.name;
                _this.click(_this.saveLink);
            });
            return;
        }
        if (FileReader) {
            var reader_1 = new FileReader();
            reader_1.onloadend = function () {
                var url = reader_1.result;
                var popup = _this.view.open(url, '_blank');
                if (!popup) {
                    _this.view.location.href = url;
                }
            };
            reader_1.readAsDataURL(blob);
            return;
        }
        if (blob.type === this.forceSaveableType) {
            this.view.location.href = objectUrl;
        }
        else if (!this.view.open(objectUrl, '_blank')) {
            this.view.location.href = objectUrl;
        }
    };
    Base64ToFile.prototype.click = function (node) {
        var event;
        if (typeof Event === 'function') {
            event = new MouseEvent('click');
        }
        else {
            event = document.createEvent('Event');
            event.initEvent('click', true, true);
        }
        node.dispatchEvent(event);
    };
    Base64ToFile.prototype.autoBom = function () {
        var blob = this.blob;
        if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
            return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });
        }
        return blob;
    };
    // Converts base64 string to Blob object
    Base64ToFile.prototype.base64toBlob = function (base64, contentType) {
        var sliceSize = 512;
        var byteCharacters = atob(base64);
        var byteArrays = [];
        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize);
            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            var byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    };
    // Returns mime type by extension
    Base64ToFile.prototype.extensionToMime = function (extension) {
        if (extension === void 0) { extension = ''; }
        switch (extension) {
            case 'jpeg':
            case 'jpg':
                return 'image/jpeg';
            case 'png':
                return 'image/png';
            case 'gif':
                return 'image/gif';
            case 'log':
            case 'txt':
                return 'text/plain';
            case 'rtf':
                return 'text/richtext';
            case 'pdf':
                return 'application/pdf';
            default:
                return 'application/octet-stream';
        }
    };
    return Base64ToFile;
}());
exports.default = Base64ToFile;
